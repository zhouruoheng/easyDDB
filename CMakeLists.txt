cmake_minimum_required(VERSION 3.10)

project(ddbs LANGUAGES C CXX)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# ------------------------------ SET BRPC --------------------------------------------

option(LINK_SO "Whether examples are linked dynamically" OFF)

execute_process(
    COMMAND bash -c "find ${PROJECT_SOURCE_DIR}/package/brpc -type d -regex \".*output/include$\" | head -n1 | xargs dirname | tr -d '\n'"
    OUTPUT_VARIABLE OUTPUT_PATH
)

set(CMAKE_PREFIX_PATH ${OUTPUT_PATH})

include(FindThreads)
include(FindProtobuf)
protobuf_generate_cpp(PROTO_SRC PROTO_HEADER db.proto)
# include PROTO_HEADER
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# Search for libthrift* by best effort. If it is not found and brpc is
# compiled with thrift protocol enabled, a link error would be reported.
find_library(THRIFT_LIB NAMES thrift)
if (NOT THRIFT_LIB)
    set(THRIFT_LIB "")
endif()
find_library(THRIFTNB_LIB NAMES thriftnb)
if (NOT THRIFTNB_LIB)
    set(THRIFTNB_LIB "")
endif()

find_path(BRPC_INCLUDE_PATH NAMES brpc/server.h)
if(LINK_SO)
    find_library(BRPC_LIB NAMES brpc)
else()
    find_library(BRPC_LIB NAMES libbrpc.a brpc)
endif()
if((NOT BRPC_INCLUDE_PATH) OR (NOT BRPC_LIB))
    message(FATAL_ERROR "Fail to find brpc")
endif()
include_directories(${BRPC_INCLUDE_PATH})

find_path(GFLAGS_INCLUDE_PATH gflags/gflags.h)
find_library(GFLAGS_LIBRARY NAMES gflags libgflags)
if((NOT GFLAGS_INCLUDE_PATH) OR (NOT GFLAGS_LIBRARY))
    message(FATAL_ERROR "Fail to find gflags")
endif()
include_directories(${GFLAGS_INCLUDE_PATH})

execute_process(
    COMMAND bash -c "grep \"namespace [_A-Za-z0-9]\\+ {\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $2}' | tr -d '\n'"
    OUTPUT_VARIABLE GFLAGS_NS
)
if(${GFLAGS_NS} STREQUAL "GFLAGS_NAMESPACE")
    execute_process(
        COMMAND bash -c "grep \"#define GFLAGS_NAMESPACE [_A-Za-z0-9]\\+\" ${GFLAGS_INCLUDE_PATH}/gflags/gflags_declare.h | head -1 | awk '{print $3}' | tr -d '\n'"
        OUTPUT_VARIABLE GFLAGS_NS
    )
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    include(CheckFunctionExists)
    CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
    if(NOT HAVE_CLOCK_GETTIME)
        set(DEFINE_CLOCK_GETTIME "-DNO_CLOCK_GETTIME_IN_MAC")
    endif()
endif()

set(CMAKE_CPP_FLAGS "${DEFINE_CLOCK_GETTIME} -DGFLAGS_NS=${GFLAGS_NS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CPP_FLAGS} -DNDEBUG -O2 -D__const__=__unused__ -pipe -W -Wall -Wno-unused-parameter -fPIC -fno-omit-frame-pointer")

if(CMAKE_VERSION VERSION_LESS "3.1.3")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    endif()
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    endif()
else()
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

find_path(LEVELDB_INCLUDE_PATH NAMES leveldb/db.h)
find_library(LEVELDB_LIB NAMES leveldb)
if ((NOT LEVELDB_INCLUDE_PATH) OR (NOT LEVELDB_LIB))
    message(FATAL_ERROR "Fail to find leveldb")
endif()
include_directories(${LEVELDB_INCLUDE_PATH})

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(OPENSSL_ROOT_DIR
        "/usr/local/opt/openssl"    # Homebrew installed OpenSSL
        )
endif()

find_package(OpenSSL REQUIRED)
include_directories(${OPENSSL_INCLUDE_DIR})

set(DYNAMIC_LIB
    ${CMAKE_THREAD_LIBS_INIT}
    ${GFLAGS_LIBRARY}
    ${PROTOBUF_LIBRARIES}
    ${LEVELDB_LIB}
    ${OPENSSL_CRYPTO_LIBRARY}
    ${OPENSSL_SSL_LIBRARY}
    ${THRIFT_LIB}
    ${THRIFTNB_LIB}
    dl
    )

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(DYNAMIC_LIB ${DYNAMIC_LIB}
        pthread
        "-framework CoreFoundation"
        "-framework CoreGraphics"
        "-framework CoreData"
        "-framework CoreText"
        "-framework Security"
        "-framework Foundation"
        "-Wl,-U,_MallocExtension_ReleaseFreeMemory"
        "-Wl,-U,_ProfilerStart"
        "-Wl,-U,_ProfilerStop")
endif()

# ------------------------------ SET SQLParser ---------------------------------------

add_custom_target(build_SQLParser ALL
    COMMAND ${CMAKE_MAKE_PROGRAM}
    COMMAND ${CMAKE_COMMAND} -E copy 
            ${CMAKE_SOURCE_DIR}/package/sql-parser/libsqlparser.so 
            ${CMAKE_BINARY_DIR}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/package/sql-parser/
    COMMENT "Original sql-parser makefile target."
)
# file(COPY ${CMAKE_SOURCE_DIR}/package/sql-parser/libsqlparser.so DESTINATION ${CMAKE_BINARY_DIR})

set(SQLParser_LIBRARY ${CMAKE_BINARY_DIR}/libsqlparser.so)

add_library(SQLParser SHARED IMPORTED)

set_property(TARGET SQLParser APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
set_target_properties(SQLParser PROPERTIES IMPORTED_LOCATION_NOCONFIG "${SQLParser_LIBRARY}")

add_dependencies(SQLParser build_SQLParser)

# ------------------------------ MySQL -------------------------------------------

find_path(MySQL_INCLUDE_PATH NAMES mysql/mysql.h)
find_library(MySQL_LIB NAMES mysqlclient)

include_directories(${MySQL_INCLUDE_PATH})

# ------------------------------ Readline -----------------------------------------

find_path(READLINE_INCLUDE_PATH NAMES readline/readline.h)
find_library(READLINE_LIB NAMES readline)

include_directories(${READLINE_INCLUDE_PATH})

# ------------------------------ json ---------------------------------------------

set(JSON_BuildTests OFF CACHE INTERNAL "")
add_subdirectory(package/nlohmann_json)

# -------------------------------- stdjson ----------------------------------------
find_path(JSON_INCLUDE_PATH NAMES json/json.h)
find_library(JSON_LIB NAMES jsoncpp)

include_directories(${JSON_INCLUDE_PATH})


# ------------------------------curl-----------------------------------------------
find_package(CURL REQUIRED)



# ------------------------------ Copy Resources -----------------------------------

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/res DESTINATION ${CMAKE_BINARY_DIR})

# ------------------------------ Executable ---------------------------------------

file(GLOB_RECURSE client_srcs CONFIGURE_DEPENDS ddbs/client/src/*.cpp ddbs/client/include/*.hpp ddbs/client/include/*.h)

file(GLOB_RECURSE server_srcs CONFIGURE_DEPENDS ddbs/server/src/*.cpp ddbs/server/include/*.hpp ddbs/server/include/*.h)

file(GLOB_RECURSE IR_srcs CONFIGURE_DEPENDS ddbs/IR/src/*.cpp ddbs/IR/include/*.hpp ddbs/IR/include/*.h)
add_library(IR STATIC ${IR_srcs})
target_include_directories(IR PUBLIC ddbs/IR/include)
target_include_directories(IR PUBLIC package/sql-parser/src)
target_link_libraries(IR SQLParser nlohmann_json::nlohmann_json)

file(GLOB_RECURSE optimizer_srcs CONFIGURE_DEPENDS ddbs/optimizer/src/*.cpp ddbs/optimizer/include/*.hpp ddbs/optimizer/include/*.h)
add_library(optimizer STATIC ${optimizer_srcs})
target_include_directories(optimizer PUBLIC ddbs/optimizer/include)
target_link_libraries(optimizer PUBLIC IR mysqlclient CURL::libcurl ${JSON_LIB})

add_executable(client ${client_srcs} ${PROTO_SRC} ${PROTO_HEADER})
target_include_directories(client PUBLIC ddbs/client/include)
target_link_libraries(client ${BRPC_LIB} ${DYNAMIC_LIB} ${READLINE_LIB} IR)

add_executable(server ${server_srcs} ${PROTO_SRC} ${PROTO_HEADER})
target_include_directories(server PUBLIC ddbs/server/include)
target_link_libraries(server ${BRPC_LIB} ${DYNAMIC_LIB} optimizer)

